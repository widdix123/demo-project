---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy EC2 Server with all necessary configurations. Install memory
  and cpu Utilization as crontab setup
Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 nstances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  EC2InstanceName:
    Description: EC2 instance Name
    Type: String
    ConstraintDescription: must be the valid name.

  EC2KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0015b9ef68c77328d
    us-west-2:
      HVM64: ami-0014eb7a3248c9cc7

Resources:
  EC2Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ["", [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: EC2Vpc

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref EC2Vpc
      InternetGatewayId: !Ref InternetGateway

  EC2PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2Vpc
      CidrBlock: 172.20.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-Subnet
  EC2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2Vpc
      CidrBlock: 172.20.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-Subnet

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: EC2Vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref EC2PublicSubnet
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2Vpc
      Tags:
      - Key: Name
        Value: Public

  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2Vpc
      Tags:
      - Key: Name
        Value: Private

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EC2PublicSubnet

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref EC2PrivateSubnet

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref EC2InstanceName
      GroupDescription: Allow http to client host
      VpcId: !Ref EC2Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      Tags:
      - Key: Name
        Value: !Ref EC2InstanceName

  EC2WebServer:
    Type: AWS::EC2::Instance
    Properties:
      #ImageId: ami-0015b9ef68c77328d
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref EC2InstanceType
      Tags:
      - Key: Name
        Value: !Ref EC2InstanceName
      - Key: InspectorValue
        Value: InspectorTag
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: gp2
          DeleteOnTermination: 'false'
          VolumeSize: '60'
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: '0'
        SubnetId: !Ref EC2PublicSubnet
        GroupSet:
        - Ref: EC2SecurityGroup
      KeyName: !Ref EC2KeyName
      UserData: !Base64 |
          #!/bin/bash
          yum install java-1.8.0-openjdk-devel -y
          yum install ansible -y
          curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
          rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
          yum install jenkins -y
          systemctl start jenkins

  EC2InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      RoleName: !Ref EC2InstanceName
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EC2InstanceProfileRole

Outputs:
  JeninsURL:
    Description: The Jenkins URL for Demo
    Value: !Join ['', ['http://', !GetAtt [EC2WebServer, PublicIp], ':8080']]
